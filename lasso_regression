#' Lasso Regression
#'
#' This function runs Lasso/Ridge Regression using caret::train method = "glmnet", with option to return as tidy dataframe of coefficents
#'
#' @param df refers to a dataframe
#' @param formula regression formula as a string
#' @param binomial TRUE or FALSE - is the target binary?
#' @param tidy.df TRUE or FALSE - transform into tidy dataframe following run?
#' @param n.folds number of k folds
#' @param cv.repeats number of repeats for cross validation
#' @param alp takes a list of numbers for alpha
#' @param lam takes a list of numbers for lamda
#'
#' @keywords
#'
#' @export
#'
#' @examples

lasso.regression <- function(df, formula, binomial = F, tidy.df = F, n.folds = 5, cv.repeats = 4, alp = seq(.1,1,.1), lam = 10^seq(4, -2, -.1)){
  library(dplyr)
  library(caret)
  df <- df %>% as.data.frame() %>% Filter(function(x)(length(unique(na.omit(x)))>1),.)
  center.scale <- preProcess(df, method = c("center", "scale",  "knnImpute"))
  df <- predict(center.scale, newdata = df) %>%
    na.omit()
  if(binomial == F){
    regressor <- train(
      as.formula(formula),
      method = "glmnet",
      tuneGrid = expand.grid(.alpha = alp, .lambda = lam),
      data = df
    )
  }else{
      regressor <- train(
        as.formula(formula),
        method = "glmnet",
        family = "binomial",
        tuneGrid = expand.grid(.alpha = alp, .lambda = lam),
        data = df
      )
  }
  if(tidy.df == T){
    lasso.regressor.coef <- coef(regressor$finalModel, regressor$bestTune$lambda) %>%
      as.matrix() %>% as.data.frame() %>% rownames_to_column() %>%
      select(term = 1, coef = 2)
    if(binomial == F){
      lasso.regressor.coef <- lasso.regressor.coef %>%
        mutate(
          abs.coef = abs(coef)
        ) %>%
        arrange(desc(abs.coef))
    }else{
      lasso.regressor.coef <- lasso.regressor.coef %>%
        mutate(
          odds.ratio = exp(coef),
          abs.coef = abs(coef)
        ) %>%
        arrange(desc(abs.coef))
    }
  }else{
    regressor
  }
}
