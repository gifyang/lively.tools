#' ANOVA
#'
#' This function runs the stats::aov function and then transforms the results into a dataframe using broom::tidy. With options for Levene's Test and Kruskal-Wallis Test.
#'
#' @param df refers to an object as a matrix or dataframe
#' @param formula input anova test as a formula
#' @param y if formula is empty, input the column name of DV of the anova test as string
#' @param x if formula is empty, input the column names of IVs of the anova test as string or list of strings
#' @param inter if formula is empty, enter a number here to test level of interaction of all IVs
#' @param levene TRUE or FALSE, TRUE performs Levene's Test of Equality of Variances. Only tests non-interactions
#' @param kruskal TRUE or FALSE, TRUE performs a Kruskal-Wallis Test if homoscedasticity assumption is not met. Only tests non-interactions
#'
#' @keywords
#'
#' @export
#'
#' @examples

anova.func <- function(df, formula = F, return.obj = F, y = F, x = F, inter = F, levene = F, kruskal = F){
  if(formula == F){
    l <- paste(x, collapse = " + ")
    if(inter != F){
      obj <- aov(as.formula(paste0(y, "~ (", l, ")^", inter)), data = df)
    }else{
      obj <- aov(as.formula(paste0(y, "~", l)), data = df)
    }
  }else{
    obj <- aov(as.formula(formula), data = df)
  }
  output <- obj %>%
    broom::tidy() %>%
    mutate(dv = paste(y))

  if(return.obj == F){
    if(formula == F){
      if(levene == T){
        output <- output %>%
          left_join(
            x %>%
              magrittr::set_names(., .) %>%
              map_df(
                ~car::leveneTest(as.formula(paste0(y, "~ ", .)), data = df) %>%
                  broom::tidy() %>%
                  filter(!is.na(p.value)) %>%
                  select(levene.p = p.value) %>% mutate(dv = paste(y)),
                .id = "term"
              ),
            by = c("dv", "term")
          )
      }
      if(kruskal == T){
        df <- df %>%
          mutate_at(vars(x), funs(as.factor(.)))
        output <- output %>%
          left_join(
            x %>%
              magrittr::set_names(., .) %>%
              map_df(
                ~kruskal.test(as.formula(paste0(y, "~ ", .)), data = df) %>%
                  broom::tidy() %>%
                  select(kruskal.p = p.value) %>% mutate(dv = paste(y)),
                .id = "term"
              ),
            by = c("dv", "term")
          )
      }
    } else {
      if(levene == T){
        output <- output %>%
          left_join(
            car::leveneTest(as.formula(formula), data = df) %>%
              broom::tidy() %>%
              filter(!is.na(p.value)) %>%
              select(levene.p = p.value) %>% mutate(dv = paste(y))
          )
        }
      if(kruskal == T){
        output <- output %>%
          left_join(
            kruskal.test(as.formula(formula), data = df) %>%
              broom::tidy() %>%
              select(kruskal.p = p.value) %>% mutate(dv = paste(y))
          )
        }
    }
    return(output)
  } else {
    return(obj)
  }
}
